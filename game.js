var sensordata = [
    {
        "deviceid": 0,
        "x": 3105.5064502509,
        "y": 1848.2402298074
    },
    {
        "deviceid": 1,
        "x": 2923.1398724756,
        "y": 1833.96304726
    },
    {
        "deviceid": 2,
        "x": 3887.3458826325,
        "y": 1334.6310080482
    },
    {
        "deviceid": 3,
        "x": 4182.7261872183,
        "y": 1350.4393679275
    },
    {
        "deviceid": 4,
        "x": 4331.192525201,
        "y": 1355.6760813151
    },
    {
        "deviceid": 5,
        "x": 3895.0142949156,
        "y": 1493.3992194262
    },
    {
        "deviceid": 6,
        "x": 4205.1536559049,
        "y": 1499.382404021
    },
    {
        "deviceid": 7,
        "x": 4338.945646574,
        "y": 1510.8380470545
    },
    {
        "deviceid": 8,
        "x": 2080.4257499304,
        "y": 1380.6912041687
    },
    {
        "deviceid": 9,
        "x": 2372.3778897479,
        "y": 1505.9710350503
    },
    {
        "deviceid": 10,
        "x": 3087.7228442104,
        "y": 1536.6891690568
    },
    {
        "deviceid": 11,
        "x": 2907.7078278775,
        "y": 1537.0699309483
    },
    {
        "deviceid": 12,
        "x": 2705.7753970699,
        "y": 1481.4991806382
    },
    {
        "deviceid": 13,
        "x": 2910.6063361551,
        "y": 1383.017043013
    },
    {
        "deviceid": 14,
        "x": 4041.7331871628,
        "y": 1344.2581876378
    },
    {
        "deviceid": 15,
        "x": 4026.5392203177,
        "y": 1519.2627905928
    },
    {
        "deviceid": 16,
        "x": 4183.6677270568,
        "y": 1346.8570161011
    },
    {
        "deviceid": 17,
        "x": 3880.6501403399,
        "y": 1506.8059852997
    },
    {
        "deviceid": 18,
        "x": 4323.1723600771,
        "y": 1515.6452872039
    },
    {
        "deviceid": 19,
        "x": 3723.039866458,
        "y": 1778.2684947709
    },
    {
        "deviceid": 20,
        "x": 4343.9756894134,
        "y": 1766.881110585
    },
    {
        "deviceid": 21,
        "x": 4182.7933246773,
        "y": 1779.9502102105
    },
    {
        "deviceid": 22,
        "x": 3092.1701359507,
        "y": 1007.4092547962
    },
    {
        "deviceid": 23,
        "x": 4168.0631130973,
        "y": 1005.4410038927
    },
    {
        "deviceid": 24,
        "x": 3965.4478940825,
        "y": 984.1595283424
    },
    {
        "deviceid": 25,
        "x": 4036.6137304075,
        "y": 1345.2226287623
    },
    {
        "deviceid": 26,
        "x": 4044.7010466083,
        "y": 1508.3475471295
    },
    {
        "deviceid": 27,
        "x": 3402.0,
        "y": 1843.0
    },
    {
        "deviceid": 28,
        "x": 3251.3581246533,
        "y": 1842.1530648461
    },
    {
        "deviceid": 29,
        "x": 2791.2399675972,
        "y": 1835.2002159768
    },
    {
        "deviceid": 30,
        "x": 2657.9716283903,
        "y": 1821.6472983517
    },
    {
        "deviceid": 31,
        "x": 2368.7543560151,
        "y": 1382.7779365053
    },
    {
        "deviceid": 32,
        "x": 2209.3054066973,
        "y": 1373.8198489325
    },
    {
        "deviceid": 33,
        "x": 1942.0,
        "y": 1380.0
    },
    {
        "deviceid": 34,
        "x": 2095.8081812038,
        "y": 1525.2690914013
    },
    {
        "deviceid": 35,
        "x": 2232.1754723338,
        "y": 1509.9233162312
    },
    {
        "deviceid": 36,
        "x": 1965.1717202607,
        "y": 1526.012800676
    },
    {
        "deviceid": 37,
        "x": 2444.4753049197,
        "y": 1829.048321257
    },
    {
        "deviceid": 38,
        "x": 1840.3070357402,
        "y": 1832.6491962217
    },
    {
        "deviceid": 39,
        "x": 2290.7536875252,
        "y": 1836.3263549399
    },
    {
        "deviceid": 40,
        "x": 1983.1786201571,
        "y": 1829.6576346156
    },
    {
        "deviceid": 41,
        "x": 2581.2977100297,
        "y": 1467.2885201921
    },
    {
        "deviceid": 42,
        "x": 3075.7684845136,
        "y": 1388.3967338328
    },
    {
        "deviceid": 43,
        "x": 2710.9272135755,
        "y": 1384.162407897
    },
    {
        "deviceid": 44,
        "x": 2561.3951606268,
        "y": 1381.0790723245
    },
    {
        "deviceid": 45,
        "x": 3876.9163400009,
        "y": 1350.8785656055
    },
    {
        "deviceid": 46,
        "x": 4317.6860379916,
        "y": 1350.6546336053
    },
    {
        "deviceid": 47,
        "x": 4174.9757808072,
        "y": 1520.278501706
    },
    {
        "deviceid": 48,
        "x": 3876.3622575887,
        "y": 1774.7871903483
    },
    {
        "deviceid": 49,
        "x": 4022.1419273144,
        "y": 1785.4242767321
    },
    {
        "deviceid": 50,
        "x": 3242.4587384119,
        "y": 996.4176920446
    },
    {
        "deviceid": 51,
        "x": 3508.7236228305,
        "y": 986.8464667554
    },
    {
        "deviceid": 52,
        "x": 3652.7456493639,
        "y": 985.5302925457
    },
    {
        "deviceid": 53,
        "x": 3386.0811726138,
        "y": 984.7332994588
    },
    {
        "deviceid": 54,
        "x": 3793.9415209221,
        "y": 981.5316404667
    },
    {
        "deviceid": 55,
        "x": 4315.0,
        "y": 1008.0
    }
]

var hour = 0;

var commonpaths = {"0": [], "1": [], "2": [[8, 32], [8, 33], [10, 42], [32, 8], [32, 33], [33, 8], [33, 32], [34, 33], [36, 8], [36, 32], [36, 33], [36, 34], [42, 10]], "3": [], "4": [[8, 32], [28, 0], [32, 8], [32, 33], [33, 8], [33, 32], [34, 33], [36, 32], [36, 33]], "5": [[8, 32], [8, 33], [8, 34], [10, 42], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [34, 8], [34, 33], [36, 8], [36, 32], [36, 33], [42, 10]], "6": [[0, 1], [0, 27], [0, 28], [0, 29], [0, 30], [0, 37], [0, 39], [0, 40], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [1, 40], [8, 32], [8, 34], [9, 31], [10, 42], [27, 0], [27, 1], [27, 28], [27, 37], [28, 0], [28, 1], [28, 27], [28, 29], [28, 30], [28, 37], [28, 39], [28, 40], [29, 0], [29, 1], [29, 28], [29, 30], [29, 37], [29, 39], [29, 40], [30, 29], [30, 37], [30, 39], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [34, 8], [34, 33], [34, 36], [36, 33], [37, 0], [37, 1], [37, 27], [37, 28], [37, 29], [37, 30], [37, 39], [37, 40], [39, 0], [39, 1], [39, 27], [39, 28], [39, 29], [39, 30], [39, 37], [39, 40], [40, 0], [40, 1], [40, 37], [40, 38], [40, 39], [42, 10], [48, 19], [51, 53], [53, 50]], "7": [[0, 1], [0, 19], [0, 27], [0, 28], [0, 29], [0, 30], [0, 37], [0, 39], [0, 40], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [1, 40], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [14, 16], [14, 47], [15, 14], [15, 47], [16, 14], [16, 47], [19, 0], [19, 1], [19, 27], [19, 28], [19, 48], [19, 49], [21, 48], [21, 49], [23, 24], [27, 0], [27, 1], [27, 19], [27, 28], [27, 37], [27, 48], [28, 0], [28, 1], [28, 19], [28, 27], [28, 29], [28, 37], [28, 39], [29, 0], [29, 1], [29, 28], [29, 30], [29, 37], [29, 39], [30, 1], [30, 29], [30, 37], [30, 39], [31, 9], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 33], [34, 36], [36, 33], [37, 0], [37, 1], [37, 9], [37, 28], [37, 29], [37, 30], [37, 39], [37, 40], [38, 39], [38, 40], [39, 0], [39, 1], [39, 28], [39, 29], [39, 30], [39, 37], [39, 38], [39, 40], [40, 1], [40, 37], [40, 38], [40, 39], [42, 10], [46, 18], [47, 14], [47, 15], [47, 16], [48, 0], [48, 1], [48, 19], [48, 27], [48, 28], [48, 49], [49, 19], [49, 48], [50, 22], [50, 51], [50, 53], [51, 50], [51, 52], [51, 53], [51, 54], [52, 50], [52, 51], [52, 53], [52, 54], [53, 22], [53, 50], [53, 51], [53, 52], [53, 54], [54, 50], [54, 51], [54, 52], [54, 53]], "8": [[0, 1], [0, 19], [0, 27], [0, 28], [0, 29], [0, 30], [0, 37], [0, 39], [1, 0], [1, 19], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [1, 40], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [13, 11], [14, 16], [15, 14], [16, 14], [16, 47], [17, 45], [18, 46], [18, 47], [19, 0], [19, 1], [19, 27], [19, 28], [19, 48], [19, 49], [22, 50], [24, 23], [27, 0], [27, 1], [27, 19], [27, 28], [27, 37], [27, 48], [28, 0], [28, 1], [28, 19], [28, 27], [28, 29], [28, 37], [29, 0], [29, 1], [29, 28], [29, 30], [29, 37], [29, 39], [30, 1], [30, 29], [30, 37], [30, 39], [31, 9], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 32], [34, 33], [34, 36], [36, 8], [36, 33], [36, 34], [36, 39], [36, 40], [37, 0], [37, 1], [37, 27], [37, 28], [37, 29], [37, 30], [37, 39], [37, 40], [39, 0], [39, 1], [39, 28], [39, 29], [39, 30], [39, 37], [39, 40], [40, 37], [40, 39], [42, 10], [46, 18], [46, 47], [47, 14], [47, 16], [47, 18], [48, 19], [48, 27], [48, 49], [49, 19], [49, 48], [50, 22], [50, 51], [50, 53], [51, 22], [51, 50], [51, 52], [51, 53], [51, 54], [52, 51], [52, 53], [52, 54], [53, 22], [53, 50], [53, 51], [54, 51], [54, 52], [54, 53]], "9": [[0, 1], [0, 27], [0, 28], [0, 29], [0, 37], [0, 39], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [11, 13], [13, 11], [14, 16], [15, 14], [16, 14], [16, 47], [18, 46], [19, 27], [19, 28], [19, 48], [21, 49], [22, 50], [27, 0], [27, 1], [27, 19], [27, 28], [28, 0], [28, 1], [28, 19], [28, 27], [28, 37], [29, 0], [29, 1], [29, 30], [29, 37], [29, 39], [30, 29], [30, 37], [31, 9], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 33], [34, 36], [35, 32], [36, 8], [36, 33], [36, 34], [37, 0], [37, 1], [37, 29], [37, 30], [37, 39], [37, 40], [38, 39], [38, 40], [39, 0], [39, 1], [39, 29], [39, 30], [39, 37], [39, 38], [39, 40], [40, 37], [40, 38], [40, 39], [42, 10], [46, 18], [47, 14], [47, 16], [48, 19], [48, 49], [49, 21], [49, 48], [50, 22], [50, 51], [51, 50], [51, 52], [51, 53], [52, 51], [53, 51]], "10": [[0, 1], [0, 27], [0, 28], [0, 29], [0, 37], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [8, 32], [8, 33], [8, 34], [9, 31], [9, 37], [10, 0], [10, 42], [11, 10], [11, 13], [13, 10], [13, 11], [14, 15], [14, 16], [15, 14], [16, 14], [16, 47], [17, 45], [18, 46], [19, 27], [19, 28], [19, 48], [22, 50], [27, 0], [27, 1], [27, 19], [27, 28], [28, 0], [28, 1], [28, 19], [28, 27], [29, 0], [29, 1], [29, 28], [29, 30], [29, 37], [30, 1], [30, 29], [30, 37], [31, 9], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 33], [34, 36], [36, 8], [36, 32], [36, 33], [36, 34], [37, 0], [37, 1], [37, 28], [37, 29], [37, 30], [37, 39], [37, 40], [38, 39], [38, 40], [39, 1], [39, 29], [39, 30], [39, 37], [39, 38], [39, 40], [40, 37], [40, 38], [40, 39], [42, 10], [46, 18], [47, 14], [47, 16], [48, 19], [48, 49], [49, 19], [49, 48], [50, 22], [50, 51], [50, 53], [51, 50], [51, 52], [51, 53], [52, 51], [52, 54], [53, 50], [53, 51], [54, 52]], "11": [[0, 1], [0, 27], [0, 28], [0, 29], [0, 37], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [11, 10], [11, 13], [13, 11], [14, 16], [15, 14], [15, 47], [16, 14], [16, 47], [17, 45], [18, 46], [19, 0], [19, 27], [19, 28], [19, 48], [21, 49], [22, 50], [27, 0], [27, 1], [27, 19], [27, 28], [28, 0], [28, 1], [28, 19], [28, 27], [28, 29], [29, 0], [29, 1], [29, 30], [29, 37], [29, 39], [30, 29], [30, 37], [31, 9], [32, 8], [32, 33], [32, 35], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 33], [34, 36], [35, 32], [36, 8], [36, 33], [36, 34], [37, 1], [37, 9], [37, 29], [37, 30], [37, 39], [37, 40], [38, 40], [39, 37], [39, 40], [40, 38], [40, 39], [42, 10], [46, 18], [47, 14], [47, 16], [48, 19], [48, 27], [48, 49], [49, 19], [49, 48], [50, 22], [50, 51], [51, 22], [51, 50], [51, 52], [51, 53], [51, 54], [52, 51], [52, 54], [53, 50], [53, 51], [54, 51], [54, 52]], "12": [[0, 1], [0, 19], [0, 27], [0, 28], [0, 29], [0, 37], [0, 39], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [11, 10], [11, 13], [13, 11], [14, 15], [14, 16], [15, 14], [15, 47], [16, 14], [16, 47], [17, 45], [18, 46], [19, 0], [19, 27], [19, 28], [19, 48], [22, 50], [27, 0], [27, 1], [27, 19], [27, 28], [28, 0], [28, 1], [28, 19], [28, 27], [28, 29], [29, 0], [29, 1], [29, 28], [29, 30], [29, 37], [29, 39], [30, 1], [30, 29], [30, 37], [31, 9], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 33], [34, 36], [36, 33], [36, 34], [37, 0], [37, 1], [37, 29], [37, 30], [37, 39], [37, 40], [39, 0], [39, 1], [39, 29], [39, 30], [39, 37], [39, 40], [40, 37], [40, 38], [40, 39], [42, 10], [46, 18], [47, 14], [47, 15], [47, 16], [48, 19], [48, 49], [49, 19], [49, 48], [50, 22], [50, 51], [51, 50], [51, 52], [51, 53], [52, 51], [53, 51], [54, 52]], "13": [[0, 1], [0, 19], [0, 27], [0, 28], [0, 29], [0, 30], [0, 37], [0, 39], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [11, 13], [13, 11], [14, 15], [14, 16], [15, 14], [16, 14], [18, 46], [19, 0], [19, 27], [19, 28], [19, 48], [19, 49], [21, 49], [22, 50], [27, 0], [27, 1], [27, 19], [27, 28], [27, 29], [27, 48], [28, 0], [28, 1], [28, 19], [28, 27], [28, 29], [28, 37], [29, 0], [29, 1], [29, 27], [29, 28], [29, 30], [29, 37], [29, 39], [30, 1], [30, 29], [30, 37], [30, 39], [31, 9], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 32], [34, 33], [34, 36], [36, 8], [36, 32], [36, 33], [36, 34], [37, 0], [37, 1], [37, 27], [37, 28], [37, 29], [37, 30], [37, 39], [37, 40], [38, 40], [39, 0], [39, 1], [39, 28], [39, 29], [39, 30], [39, 37], [39, 40], [40, 37], [40, 38], [40, 39], [42, 10], [46, 18], [47, 14], [47, 16], [48, 19], [48, 27], [48, 49], [49, 19], [49, 21], [49, 48], [50, 22], [50, 51], [51, 22], [51, 50], [51, 52], [51, 53], [52, 51], [53, 50], [53, 51]], "14": [[0, 1], [0, 19], [0, 27], [0, 28], [0, 29], [0, 37], [0, 39], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [1, 39], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [14, 15], [14, 16], [15, 14], [16, 14], [18, 46], [19, 27], [19, 28], [19, 48], [19, 49], [21, 49], [22, 50], [22, 51], [27, 0], [27, 1], [27, 19], [27, 28], [28, 0], [28, 1], [28, 19], [28, 27], [29, 0], [29, 1], [29, 28], [29, 30], [29, 37], [29, 39], [30, 1], [30, 29], [30, 37], [31, 9], [32, 8], [32, 33], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 33], [34, 36], [36, 33], [36, 34], [37, 0], [37, 1], [37, 29], [37, 30], [37, 39], [37, 40], [38, 39], [38, 40], [39, 0], [39, 1], [39, 29], [39, 30], [39, 37], [39, 40], [40, 37], [40, 38], [40, 39], [42, 10], [46, 18], [47, 16], [48, 19], [48, 49], [49, 19], [49, 21], [49, 48], [50, 22], [50, 51], [51, 22], [51, 50], [51, 52], [52, 51], [53, 51]], "15": [[0, 1], [0, 19], [0, 27], [0, 28], [0, 29], [1, 0], [1, 27], [1, 28], [1, 29], [1, 30], [1, 37], [8, 32], [8, 33], [8, 34], [9, 31], [10, 42], [14, 16], [18, 46], [19, 27], [19, 28], [19, 48], [22, 50], [22, 51], [27, 0], [27, 1], [27, 19], [27, 28], [27, 48], [28, 0], [28, 1], [28, 19], [28, 27], [29, 0], [29, 1], [29, 27], [29, 28], [29, 37], [30, 1], [30, 29], [31, 9], [32, 8], [33, 8], [33, 32], [33, 34], [33, 36], [34, 8], [34, 33], [34, 36], [36, 33], [36, 34], [37, 0], [37, 1], [37, 27], [37, 29], [37, 30], [37, 39], [39, 1], [39, 29], [39, 37], [40, 39], [42, 10], [46, 18], [48, 19], [48, 49], [49, 19], [49, 48], [50, 22], [50, 51], [50, 53], [51, 22], [51, 52], [52, 51], [53, 51], [54, 24]],
 "16": [[0, 1], [0, 19], [0, 27], [0, 28], [0, 29], [1, 0], [1, 19], [1, 27], [1, 28], [1, 29], [1, 37], [8, 32], [8, 34], [10, 42], [19, 27], [19, 28], [19, 48], [22, 50], [22, 51], [22, 53], [27, 0], [27, 19], [27, 28], [27, 48], [28, 0], [28, 19], [28, 27], [28, 48], [29, 0], [29, 1], [29, 27], [29, 28], [29, 37], [30, 1], [30, 29], [32, 8], [33, 34], [33, 36], [34, 8], [37, 0], [37, 1], [37, 27], [37, 28], [37, 29], [37, 30], [39, 0], [39, 1], [39, 29], [39, 30], [39, 37], [40, 39], [42, 10], [48, 19], [50, 22], [50, 51], [50, 53], [51, 52], [52, 51], [53, 51]], "17": [], "18": [], "19": [], "20": [], "21": [], "22": [], "23": []}

ParticleEffectsString = 'particle-effects'

var ParticleEffects = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function ParticleEffects ()
    {
        Phaser.Scene.call(this, { key: ParticleEffectsString, active: true });
    },

    create: function ()
    {
        
        var particles = this.add.particles('shapes');
        this.events.on('trail-to', (data) => {
            const emitter = particles.createEmitter({
                x: sensordata[data.path[0]].x/4,
                y: sensordata[data.path[0]].y/4,
                "active":true,
                "visible":true,
                "collideBottom":true,
                "collideLeft":true,
                "collideRight":true,
                "collideTop":true,
                "on":true,
                "particleBringToTop":true,
                "radial":true,
                "frame":{"frames":["circle_01"],"cycle":false,"quantity":1},
                "frequency":0,"gravityX":0,"gravityY":0,"maxParticles":0,"timeScale":1,
                "blendMode":0,"accelerationX":0,"accelerationY":0,"alpha":1,
                "angle":{"min":0,"max":360,"ease":"Linear"},"bounce":0,"delay":0,
                "lifespan":1000,"maxVelocityX":10000,"maxVelocityY":10000,"moveToX":0,"moveToY":0,
                "quantity":1,"rotate":0,"scale":{"start":0.15,"end":0,"ease":"Linear"},"speed":0.01,
                "tint":[5140979],"emitZone":{"source":new Phaser.Geom.Circle(0,0,10),"type":"random"}
            });

            var xVals = [];
            var yVals = [];
            data.path.forEach((device) => {
                xVals.push(sensordata[device].x/4);
                yVals.push(sensordata[device].y/4);
            });

            var distance = 0;
            for (var i = 1; i < xVals.length; i++) {
                distance += Phaser.Math.Distance.Between(xVals[i-1], yVals[i-1], xVals[i], yVals[i]);
            }

            const duration = distance / 0.05;
            
            this.tweens.addCounter({
                from: 0,
                to: 1,
                ease: Phaser.Math.Easing.Sine.InOut,
                duration: duration,
                onUpdate: tween => {
                    const v = tween.getValue()
                    const x = Phaser.Math.Interpolation.CatmullRom(xVals, v)
                    const y = Phaser.Math.Interpolation.CatmullRom(yVals, v)

                    emitter.setPosition(x, y)
                },
                onComplete: () => {
                    // emitter.explode(50, data.toX, data.toY)
                    emitter.stop()

                    this.time.delayedCall(duration, () => {
                        particles.removeEmitter(emitter)
                    })
                }
            })

        })
    }
});


var GameScene = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function GameScene ()
    {
        Phaser.Scene.call(this, { key: 'GameScene' });
    },

    preload: function ()
    {
        this.load.image('bg', 'site_1_s.png');
        this.load.atlas('shapes', 'assets/shapes.png', 'assets/shapes.json');
        this.load.text('particle-effect', 'assets/particle-effect.json');
    },

    clickHandler: function ()
    {
        //  Disable our box
        // box.input.enabled = false;
        // box.setVisible(false);
        // console.log(sensor.id)
        if (hour == 23) {
            hour = 0;
        } else {
            hour += 1;
        }
        //  Dispatch a Scene event
        this.events.emit('updateHour');
    },

    create: function ()
    {
        this.add.image(659, 329.5, 'bg');

        // for (var i = 0; i < 64; i++)
        // {
        //     var x = Phaser.Math.Between(0, 800);
        //     var y = Phaser.Math.Between(0, 600);

        //     var box = this.add.image(x, y, 'crate');

        //     //  Make them all input enabled
        //     box.setInteractive();
        // }

        var sensorCoords = [];

        sensordata.forEach(function(sensor) {
            sensorCoords.push(sensor);
        });

        var selectedSensorIndex = 0;

        // Draw sensors
        sensors = [];
        sensorCoords.forEach(function(sensor, index) {
            var x = sensor.x;
            var y = sensor.y;
            var radius = 10;
            var color = 0xff0000;
            var alpha = 1;
            var sensorobj = this.add.circle(x/4, y/4, radius, color, alpha);
            sensorobj.id = sensor.deviceid;
            sensorobj.setInteractive();
            // this.input.setDraggable(sensorobj);
            sensors.push(sensorobj);
            // sensor.on('pointerdown', this.clickHandler, this);
        }, this);


        this.input.on('gameobjectup', this.clickHandler, this);
        this.input.on('dragstart', function (pointer, gameObject) {

            // gameObject.setTint(0xff0000);
    
        });
    
        this.input.on('drag', function (pointer, gameObject, dragX, dragY) {
    
            gameObject.x = dragX;
            gameObject.y = dragY;
    
        });
    
        let $this = this;
        // this.input.on('dragend', (pointer, gameObject) => {
    
        //     var particleEffects = this.scene.get(ParticleEffectsString)
        //     particleEffects.events.emit('trail-to', {
        //         fromX: gameObject.x,
        //         fromY: gameObject.y,
        //         toX: 100,
        //         toY: 100
        //     })
    
        // });
        this.scene.run(ParticleEffectsString);
        setInterval(() => {
            commonpaths[hour.toString()].forEach(function(path) {
                var fromX = sensors[path[0]].x;
                var fromY = sensors[path[0]].y;
                var toX = sensors[path[1]].x;
                var toY = sensors[path[1]].y;
                var particleEffects = $this.scene.get(ParticleEffectsString)
                particleEffects.events.emit('trail-to', {
                    // fromX: fromX,
                    // fromY: fromY,
                    // toX: toX,
                    // toY: toY
                    path: path
                })
            });
        }, 1200);
        // this.input.keyboard.on('keydown-W', this.clickHandler, this);
        setInterval(() => {this.clickHandler()}, 4000)
        
    },

    

});

var UIScene = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function UIScene ()
    {
        Phaser.Scene.call(this, { key: 'UIScene', active: true });

        this.score = 0;
    },

    create: function ()
    {
        //  Our Text object to display the Score
        var info = this.add.text(10, 10, hour + ":00", { font: '48px Arial', fill: '#ffffff' });

        //  Grab a reference to the Game Scene
        var ourGame = this.scene.get('GameScene');

        //  Listen for events from it
        ourGame.events.on('updateHour', function () {

            // this.score = sensor.id;

            info.setText(hour + ":00");

        }, this);
    }

});

var config = {
    type: Phaser.AUTO,
    width: 1350,
    height: 700,
    backgroundColor: '#000000',
    parent: 'gamediv',
    scene: [ GameScene, UIScene, ParticleEffects ]
};

var game = new Phaser.Game(config);
